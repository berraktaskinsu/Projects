## 1) Insert_n

Insert_n:
	addi $sp, $sp, -8
	sw $s0, 4($sp)
	sw $ra, 0($sp)
	move $s0, $zero
	move $t0, $zero
	move $t1, $zero
	
	addi $a2, $a2, -1
	move $v1, $a0 # $v1: pointer ( return )
	li $a0, 16	
	li $v0, 9	
	syscall
	sw $a1, 4($v0)
	move $a0, $v1 # $a0: pointer
	move $s0, $v0 # $s0: address of new node
	beq $a0, $zero, notValid1
	loop1:
		addi $t1, $t1, 1
		beq $t1, $a2, insert
		lw $t0, 0($a0)
		beq $t0, $zero, notValid1
		move $a0, $t0
		b loop1
	insert:
	lw $t0, 0($a0)
	sw $t0, 0($s0)
	sw $s0, 0($a0)
	b valid1
	notValid1:
	li $v0, -1
	b skip1
	valid1:
	li $v0, 0
	skip1:
	lw $s0, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 8
	jr $ra

## 2) AddNodes

AddNodes:
	addi $sp, $sp, -12
	sw $s0, 8($sp)
	sw $s1, 4($sp)
	sw $ra, 0($sp)
	move $t0, $zero
	move $t1, $zero
	
	move $v1, $a0
	beq $a0, $zero, notValid4
	loop4:
		addi $t1, $t1, 1
		beq $t1, $a1, addNodes
		lw $t0, 0($a0)
		beq $t0, $zero, notValid4
		lw $t2, 0($t0)
		beq $t2, $zero, notValid4
		move $a0, $t0
		b loop4	
	addNodes:
	lw $t0, 0($a0)
	lw $t2, 0($t0)
	lw $s0, 4($a0)
	lw $s1, 4($t0)
	add $s0, $s0, $s1	
	sw $s0, 4($a0)
	sw $t2, 0($a0)
	li $v0, 0	
	b end4
	notValid4:
	li $v0, -1
	end4:
	lw $s0, 8($sp)
	lw $s1, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 12
	jr $ra

## 3) SwapNodes

SwapNodes:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	move $t0, $zero
	move $t1, $zero
	move $t2, $zero
	move $t3, $zero
	
	move $v1, $a0
	beq $a0, $zero, notValid5
	addi $a1, $a1, -1
	loop5:
		addi $t1, $t1, 1
		beq $t1, $a1, swapNodes
		lw $t0, 0($a0)
		beq $t0, $zero, notValid5
		lw $t2, 0($t0)
		beq $t2, $zero, notValid5
		move $a0, $t0
		b loop5
	swapNodes:
	lw $t0, 0($a0)
	lw $t2, 0($t0)
	beq $t2, $zero, notValid5
	lw $t3, 0($t2) 
	sw $t3, 0($t0)
	sw $t2, 0($a0)
	sw $t0, 0($t2)
	li $v0, 0	
	b end5
	#swapFirst:
	#li $v0, 0
	#b end5
	notValid5:
	li $v0, -1
	end5:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

## 4) CountCommonValues

CountCommonValues:
	addi $sp, $sp, -16
	sw $s2, 12($sp)
	sw $s1, 8($sp)
	sw $s0, 4($sp)
	sw $ra, 0($sp)
	# $a0: list 1
	# $a1: list 2
	move $t9, $a0
	
	jal create_list
	move $s0, $zero
	move $s1, $zero
	move $s2, $zero
	move $a0, $t9
	move $a1, $v0
	move $a2, $v0
	while1:
		lw $s0, 4($a0)
		move $a1, $a2
		while2:
			lw $s1, 4($a1)
			bne $s0, $s1, nextElem
			addi $s2, $s2, 1
			b end2
			nextElem:
			lw $a1, 0($a1)
			beqz $a1, end2
			b while2
		end2:	
		lw $a0, 0($a0)
		beqz $a0, end1
		b while1
	end1:
	move $v1, $s2
	move $v0, $zero
	lw $s2, 12($sp)
	lw $s1, 8($sp)
	lw $s0, 4($sp)
	lw $ra, 0($sp)
	addi $sp, $sp, 16
	jr $ra

## 5) Delete_n

Delete_n:
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	move $t0, $zero
	move $t1, $zero
	move $t2, $zero
	
	move $v1, $a0
	beq $a1, 1, deleteFirst
	beq $a0, $zero, notValid3
	addi $a1, $a1, -1
	loop3:
		addi $t1, $t1, 1
		beq $t1, $a1, delete3
		lw $t0, 0($a0)
		lw $t2, 0($t0)
		beq $t2, $zero, delete3
		move $a0, $t0
		b loop3
	delete3:
	lw $t1, 0($a0)
	lw $t0, 0($t1)
	sw $t0, 0($a0)
	li $v0, 0
	b end3
	deleteFirst:
	lw $v1, 0($a0)
	li $v0, 0
	b end3
	
	notValid3:
	li $v0, -1
	end3:
	lw $ra, 0($sp)
	addi $sp, $sp, 4
	jr $ra

## 6) FindSumInRange

FindSumInRange:
	addi 	$sp, $sp, -8
	# $a0: pointer
	# $a1: lower bound
	# $a2: upper bound
	sw 	$a3, 4($sp) # $s0: value
	sw 	$ra, 0($sp)
	move $v0, $zero 
	move $v1, $zero
	move $t1, $zero
	move $t2, $zero
	
	lw $t1, 0($a0)
	lw $a3, 4($a0)
	bne $t1, $zero, else
	bgt $a3, $a2, skip11
	blt $a3, $a1, skip11
	add $v1, $v1, $a3
	skip11:
	jr	$ra
	else:
	lw 	$a0, 0($a0)
	jal FindSumInRange	
	lw	$ra, 0($sp)
	lw 	$a3, 4($sp)
	bgt $a3, $a2, skip22
	blt $a3, $a1, skip22
	addi	$sp, $sp, 8
	add	$v1, $v1, $a3
	jr	$ra
	skip22:
	addi	$sp, $sp, 8
	jr	$ra